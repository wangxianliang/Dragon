// recommend all int32/64 repeated item add [packed=true]
// pursue smaller space

message Datum{
    optional int32 channels=1;
    optional int32 height=2;
    optional int32 width=3;
    optional int32 label=4;
    optional bytes data=5;
    repeated float float_data=6 [packed=true];
    optional bool encoded=7 [default=false];
}

message SolverParameter{
    optional string train_net=1;
    repeated string test_net=2;
    repeated int32 test_iter=3;
    optional int32 test_interval=4 [default=0];
    optional bool test_compute_loss=19 [default=false];
    optional bool test_before_train=32 [default=false];
    optional float base_lr=5;
    optional int32 display=6;
    optional int32 average_loss=33 [default=1];
    optional int32 max_iter=7;
    optional int32 iter_size=36 [default=1];
    optional string lr_policy=8;
    optional float gamma=9;
    optional float power=10;
    optional float momentum=11;
    optional float weight_decay=12;
    optional string regularizer=29 [default="L2"];
    optional int32 step_size=13;
    repeated int32 step_value=34;
    optional float clip_gradients=35 [default=-1];
    optional int32 snapshot_interval=14 [default=0];
    optional bool snapshot_after_train=28 [default=true];
    optional string snapshot_prefix=15;
    optional bool snapshot_diff=16;
    enum SnapShotFormat{HDF5=0;BINARY=1;}
    optional SnapShotFormat snapshot_format=37 [default=BINARY];
    enum SolverMode{CPU=0;GPU=1;}
    optional SolverMode solver_mode=17 [default=GPU];
    optional int32 device_id=18 [default=0];
    optional int64 random_seed=20 [default=-1];
    optional string type=40 [default="SGD"];
    //  eps
    optional float delta=31 [default=1e-10];
    //  Adam solver
    optional float momentum2=39 [default=0.999];
    optional float rms_decay=38;
    optional bool debug_info=23 [default=false];
    enum SolverType{
        SGD=0;NESTEROV=1;ADAGRAD=2;RMSPROP=3;ADADELTA=4;ADAM=5;
    }
    optional SolverType solver_type=30 [default=SGD];
    optional uint32 root_rank=41 [default=0];
}

message SolverState{
    optional int32 iter = 1; // The current iteration
    optional string learned_net = 2; // The file that stores the learned net.
    repeated BlobProto history = 3; // The history for sgd solvers
    optional int32 current_step = 4 [default = 0]; // The current step for learning rate
}

message FillerParameter{
    optional string type=1 [default='constant'];
    optional float value=2 [default=0];
    optional float low=3 [default=0];
    optional float high=4 [default=1];
    optional float mean=5 [default=0];
    optional float std=6 [default=1];
    optional int32 sparse=7 [default=-1];
    enum VarianceNorm{FAN_IN=0;FAN_OUT=1;AVG=2;}
    optional VarianceNorm variance_norm=8 [default=FAN_IN];
}

message NetState{
    optional Phase phase=1 [default=TEST];
    optional int32 level=2 [default=0];
    repeated string stage=3;
}

message NetStateRule{
    optional Phase phase=1;
    repeated uint32 mpi_rank = 6;
}

message NetParameter{
    optional string name=1;
    repeated string input=2;
    repeated BlobShape input_shape=8;
    optional bool force_backward=4 [default=false];
    optional NetState state=5;
    optional bool debug_info=6 [default=false];
    repeated LayerParameter layer=100;
}

message BlobShape{
    repeated int64 dim=1 [packed=true];
}

message BlobProto {
  optional BlobShape shape = 7;
  repeated float data = 5 [packed = true];
  repeated float diff = 6 [packed = true];
  repeated double double_data = 8 [packed = true];
  repeated double double_diff = 9 [packed = true];
  // 4D dimensions -- deprecated.  Use "shape" instead.
  optional int32 num = 1 [default = 0];
  optional int32 channels = 2 [default = 0];
  optional int32 height = 3 [default = 0];
  optional int32 width = 4 [default = 0];
}

enum Phase{
    TRAIN=0;
    TEST=1;
}

message ParamSpec{
    enum DimCheckMode {
    // STRICT (default) requires that num, channels, height, width each match.
    STRICT_MODE = 0;
    // PERMISSIVE requires only the count (num*channels*height*width) to match.
    PERMISSIVE_MODE = 1;
  }
    optional string name=1;
    optional DimCheckMode share_mode=2;
    optional float lr_mult=3 [default=1.0];
    optional float decay_mult=4 [default=1.0];
}


message DataParameter{
    enum DB{
        LEVELDB=0;
        LMDB=1;
    }
    optional string source=1;
    optional uint32 batch_size=2;
    optional DB backend=3 [default=LMDB];
    //  4-way pre-buffering is enough for normal machines
    optional uint32 prefech=4 [default=4];
    //  you can cancel data iteration when in application
    optional bool iteration=5 [default=true];
}

message TransformationParameter{
    optional float scale=1 [default=1.0];
    optional bool mirror=2 [default=false];
    optional uint32 crop_size=3 [default=0];
    optional string mean_file=4;
    repeated float mean_value=5;
    optional bool force_color=6 [default=false];
    optional bool force_gray=7 [default=false];
}

message LayerParameter{
    optional string name=1;
    optional string type=2;
    repeated string bottom=3;
    repeated string top=4;
    optional Phase phase=10;
    repeated float loss_weight=5;
    repeated bool result_weight=30;
    repeated ParamSpec param=6; //why repeat?
    repeated BlobProto blobs=7;
    optional DataParameter data_param=8;
    optional TransformationParameter transform_param=9;
    optional ReLUParameter relu_param=19;
    optional ConvolutionParameter convolution_param=11;
    optional PoolingParameter pooling_param=12;
    optional InnerProductParameter inner_product_param=13;
    optional LossParameter loss_param=14;
    optional AccuracyParameter accuracy_param=15;
    optional BatchNormParameter batch_norm_param=20;
    optional DropoutParameter dropout_param=21;
    optional LSTMParameter lstm_param=22;
    optional PythonParameter python_param=23;
    optional ROIPoolingParameter roi_pooling_param=24;
    optional SmoothL1LossParameter smooth_l1_loss_param=25;
    optional ReshapeParameter reshape_param=26;
    optional LRNParameter lrn_param=27;
    optional PowerParameter power_param=28;
    optional EltwiseParameter eltwise_param=29;
    optional CropParameter crop_param=31;
    optional MPIParameter mpi_param=32;
    optional ImageFilesParameter image_files_param=101;
    optional SoftmaxParameter softmax_param=16;
    repeated NetStateRule include=17;
    repeated NetStateRule exclude=18;
}

message ConvolutionParameter{
    optional uint32 num_output=1;
    optional bool bias_term=2 [default=true];
    repeated uint32 pad=3;
    repeated uint32 kernel=4;
    repeated uint32 stride=5;
    optional uint32 group=6 [default = 1];
    optional FillerParameter weight_filler=7;
    optional FillerParameter bias_filler=8;
    optional uint32 pad_h=9 [default=0];
    optional uint32 pad_w=10 [default=0];
    optional uint32 kernel_h=11;
    optional uint32 kernel_w=12;
    optional uint32 stride_h=13;
    optional uint32 stride_w=14;
    enum Engine{DEFAULT=0;DRAGON=1;CUDNN=2;}
    optional Engine engine=15 [default=DEFAULT];
    optional int32 axis=16 [default=1];
    optional bool force_nd_im2col=17 [default=false];
}

message PoolingParameter{
    enum Method{MAX=0;AVG=1;STOCHASTIC=2;}
    enum Engine{DEFAULT=0;DRAGON=1;CUDNN=2;}
    optional Method method=1 [default=MAX];
    optional uint32 pad=2 [default=0];
    optional uint32 kernel=3;
    optional uint32 stride=4 [default=1];
    optional uint32 pad_h=5 [default=0];
    optional uint32 pad_w=6 [default=0];
    optional uint32 kernel_h=7;
    optional uint32 kernel_w=8;
    optional uint32 stride_h=9;
    optional uint32 stride_w=10;
    optional Engine engine=11 [default=DEFAULT];
    optional bool global_pooling=12 [default=false];
}

message InnerProductParameter{
  optional uint32 num_output = 1;
  optional bool bias_term = 2 [default = true];
  optional FillerParameter weight_filler = 3;
  optional FillerParameter bias_filler = 4;
  optional int32 axis = 5 [default = 1];
}

message SoftmaxParameter {
  enum Engine {DEFAULT = 0;DRAGON = 1;CUDNN = 2;}
  optional Engine engine = 1 [default = DEFAULT];
  optional int32 axis = 2 [default = 1];
}

message LossParameter {
  optional int32 ignore_label = 1;
  optional bool normalize = 2 [default = true];
}

message AccuracyParameter {
  optional uint32 top_k = 1 [default = 1];
  optional int32 axis = 2 [default = 1];
  optional int32 ignore_label = 3;
}

message ReLUParameter{
    optional float negative_slope=1 [default=0];
    enum Engine{DEFAULT=0;DRAGON=1;CUDNN=2;}
    optional Engine engine=2 [default=DEFAULT];
}

message BatchNormParameter{
    optional bool use_global_stats=1 [default=true];
    optional float decay=3 [default=0.95];
    optional float eps=2 [default=1e-10];
}

message DropoutParameter {
  optional float prob = 1 [default = 0.5];
  //  caffe implement dropout with a scale op
  //  which is found more regularized than hinton's
  optional bool scale=2 [default=true];
}

message LSTMParameter {
  optional uint32 num_output = 1; // The number of outputs for the layer
  optional float clipping_threshold = 2 [default = 0.0];
  optional FillerParameter weight_filler = 3; // The filler for weight
  optional FillerParameter bias_filler = 4; // The filler for the bias
  optional uint32 batch_size = 5 [default = 1];
}

message PythonParameter{
    //  moudle python file
    optional string module=1;
    //  layer python class
    optional string layer=2;
    optional string param_str=3 [default=''];
    //  data parallelism
    optional bool share_in_parallel=4 [default=false];
}

message ROIPoolingParameter {
  // Pad, kernel size, and stride are all given as a single value for equal
  // dimensions in height and width or as Y, X pairs.
  optional uint32 pooled_h = 1 [default = 0]; // The pooled output height
  optional uint32 pooled_w = 2 [default = 0]; // The pooled output width
  // Multiplicative spatial scale factor to translate ROI coords from their
  // input scale to the scale used when pooling
  optional float spatial_scale = 3 [default = 1];
}

message SmoothL1LossParameter {
  // SmoothL1Loss(x) =
  //   0.5 * (sigma * x) ** 2    -- if x < 1.0 / sigma / sigma
  //   |x| - 0.5 / sigma / sigma -- otherwise
  optional float sigma = 1 [default = 1];
}

message ReshapeParameter {
  optional BlobShape shape = 1;
  optional int32 axis = 2 [default = 0];
  optional int32 num_axes = 3 [default = -1];
}

message LRNParameter {
  optional uint32 local_size = 1 [default = 5];
  optional float alpha = 2 [default = 1.];
  optional float beta = 3 [default = 0.75];
  enum NormRegion {
    ACROSS_CHANNELS = 0;
    WITHIN_CHANNEL = 1;
  }
  optional NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
  optional float k = 5 [default = 1.];
  enum Engine {
    DEFAULT = 0;
    CAFFE = 1;
    CUDNN = 2;
  }
  optional Engine engine = 6 [default = DEFAULT];
}

message PowerParameter {
  // PowerLayer computes outputs y = (shift + scale * x) ^ power.
  optional float power = 1 [default = 1.0];
  optional float scale = 2 [default = 1.0];
  optional float shift = 3 [default = 0.0];
}

message EltwiseParameter {
  enum EltwiseOp {PROD = 0;SUM = 1;MAX = 2;}
  optional EltwiseOp operation = 1 [default = SUM]; // element-wise operation
  repeated float coeff = 2; // blob-wise coefficient for SUM operation
  // Whether to use an asymptotically slower (for >2 inputs) but stabler method
  // of computing the gradient for the PROD operation. (No effect for SUM op.)
  optional bool stable_prod_grad = 3 [default = true];
}


// stuff file paths from net/sovler externally
message ImageFilesParameter{
    optional string text_file=1;
    repeated string image_files=2;
    optional BlobShape input_shape=3;
    optional bool use_static=4 [default=true];
}

message CropParameter {
  optional int32 axis = 1 [default = 2];
  repeated uint32 offset = 2;
}

message MPIParameter{
    optional uint32 root=1 [default=0];
    optional uint64 comm_id=2 [default=0];
    optional uint64 group_id=3 [default=0];
}

message ClientParameter{
    optional string ip=1 [default='127.0.0.1'];
    optional uint32 port=2 [default=2333];
    optional string solver=3;
    optional uint32 param_id=4;
    optional int32 gpu_id=5 [default=-1];
}
message ServerParameter{
    optional string ip=1 [default='127.0.0.1'];
    optional uint32 port=2 [default=2333];
    optional string solver=3;
    optional int32 gpu_id=5 [default=-1];
}
message DomainParameter{
    repeated ServerParameter server=1;
    repeated ClientParameter client=2;
}

